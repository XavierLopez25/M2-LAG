
Reglas extraídas:
  "if" $ -> IF
  "else" $ -> ELSE
  "while" $ -> WHILE
  "==" $ -> EQUALS
  "!=" $ -> NOTEQUAL
  "<" $ -> LESS
  ">" $ -> GREATER
  "<=" $ -> LESSEQ
  ">=" $ -> GREATEREQ
  "+" $ -> PLUS
  "-" $ -> MINUS
  "*" $ -> TIMES
  "/" $ -> DIVIDE
  "(" $ -> LPAREN
  ")" $ -> RPAREN
  ":" $ -> COLON
  ";" $ -> SEMICOLON
  "=" $ -> ASSIGN
  "," $ -> COMMA
  "{" $ -> LBRACE
  "}" $ -> RBRACE
  "[" $ -> LBRACKET
  "]" $ -> RBRACKET
  \# ([a-zA-Z0-9 	]+) $ -> COMMENT
  ([a-zA-Z]) (([a-zA-Z]) | ([0-9]))* $ -> ID
  (([0-9])+) $ -> NUMBER
  (" " | "	" | "
" | "") $ -> WHITESPACE
[main] Postfix generado: [('LITERAL', 'i'), ('LITERAL', 'f'), ('OPERATOR', '.'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~IF'), ('LITERAL', 'e'), ('LITERAL', 'l'), ('OPERATOR', '.'), ('LITERAL', 's'), ('OPERATOR', '.'), ('LITERAL', 'e'), ('OPERATOR', '.'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~ELSE'), ('OPERATOR', '|'), ('LITERAL', 'w'), ('LITERAL', 'h'), ('OPERATOR', '.'), ('LITERAL', 'i'), ('OPERATOR', '.'), ('LITERAL', 'l'), ('OPERATOR', '.'), ('LITERAL', 'e'), ('OPERATOR', '.'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~WHILE'), ('OPERATOR', '|'), ('LITERAL', '='), ('LITERAL', '='), ('OPERATOR', '.'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~EQUALS'), ('OPERATOR', '|'), ('LITERAL', '!'), ('LITERAL', '='), ('OPERATOR', '.'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~NOTEQUAL'), ('OPERATOR', '|'), ('LITERAL', '<'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~LESS'), ('OPERATOR', '|'), ('LITERAL', '>'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~GREATER'), ('OPERATOR', '|'), ('LITERAL', '<'), ('LITERAL', '='), ('OPERATOR', '.'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~LESSEQ'), ('OPERATOR', '|'), ('LITERAL', '>'), ('LITERAL', '='), ('OPERATOR', '.'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~GREATEREQ'), ('OPERATOR', '|'), ('LITERAL', '+'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~PLUS'), ('OPERATOR', '|'), ('LITERAL', '-'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~MINUS'), ('OPERATOR', '|'), ('LITERAL', '*'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~TIMES'), ('OPERATOR', '|'), ('LITERAL', '/'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~DIVIDE'), ('OPERATOR', '|'), ('LITERAL', '('), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~LPAREN'), ('OPERATOR', '|'), ('LITERAL', ')'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~RPAREN'), ('OPERATOR', '|'), ('LITERAL', ':'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~COLON'), ('OPERATOR', '|'), ('LITERAL', ';'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~SEMICOLON'), ('OPERATOR', '|'), ('LITERAL', '='), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~ASSIGN'), ('OPERATOR', '|'), ('LITERAL', ','), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~COMMA'), ('OPERATOR', '|'), ('LITERAL', '{'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~LBRACE'), ('OPERATOR', '|'), ('LITERAL', '}'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~RBRACE'), ('OPERATOR', '|'), ('LITERAL', '['), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~LBRACKET'), ('OPERATOR', '|'), ('LITERAL', ']'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~RBRACKET'), ('OPERATOR', '|'), ('LITERAL', '#'), ('BRACKET', '[a-zA-Z0-9 \t]'), ('OPERATOR', '+'), ('OPERATOR', '.'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~COMMENT'), ('OPERATOR', '|'), ('BRACKET', '[a-zA-Z]'), ('BRACKET', '[a-zA-Z]'), ('BRACKET', '[0-9]'), ('OPERATOR', '|'), ('OPERATOR', '*'), ('OPERATOR', '.'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~ID'), ('OPERATOR', '|'), ('BRACKET', '[0-9]'), ('OPERATOR', '+'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~NUMBER'), ('OPERATOR', '|'), ('LITERAL', ' '), ('LITERAL', '\t'), ('OPERATOR', '|'), ('LITERAL', '\n'), ('OPERATOR', '|'), ('LITERAL', '\r'), ('OPERATOR', '|'), ('LITERAL', '$'), ('OPERATOR', '.'), ('TOKEN', '~WHITESPACE'), ('OPERATOR', '|')]

[main] AST generado:
(((((((((((((((((((((((((((((i.f).$)~)|(((((e.l).s).e).$)~))|((((((w.h).i).l).e).$)~))|(((=.=).$)~))|(((!.=).$)~))|((<.$)~))|((>.$)~))|(((<.=).$)~))|(((>.=).$)~))|((+.$)~))|((-.$)~))|((*.$)~))|((/.$)~))|(((.$)~))|(().$)~))|((:.$)~))|((;.$)~))|((=.$)~))|((,.$)~))|(({.$)~))|((}.$)~))|(([.$)~))|((].$)~))|(((#.((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((a|b)|c)|d)|e)|f)|g)|h)|i)|j)|k)|l)|m)|n)|o)|p)|q)|r)|s)|t)|u)|v)|w)|x)|y)|z)|A)|B)|C)|D)|E)|F)|G)|H)|I)|J)|K)|L)|M)|N)|O)|P)|Q)|R)|S)|T)|U)|V)|W)|X)|Y)|Z)|0)|1)|2)|3)|4)|5)|6)|7)|8)|9)| )|	).((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((a|b)|c)|d)|e)|f)|g)|h)|i)|j)|k)|l)|m)|n)|o)|p)|q)|r)|s)|t)|u)|v)|w)|x)|y)|z)|A)|B)|C)|D)|E)|F)|G)|H)|I)|J)|K)|L)|M)|N)|O)|P)|Q)|R)|S)|T)|U)|V)|W)|X)|Y)|Z)|0)|1)|2)|3)|4)|5)|6)|7)|8)|9)| )|	)*))).$)~))|((((((((((((((((((((((((((((((((((((((((((((((((((((((a|b)|c)|d)|e)|f)|g)|h)|i)|j)|k)|l)|m)|n)|o)|p)|q)|r)|s)|t)|u)|v)|w)|x)|y)|z)|A)|B)|C)|D)|E)|F)|G)|H)|I)|J)|K)|L)|M)|N)|O)|P)|Q)|R)|S)|T)|U)|V)|W)|X)|Y)|Z).(((((((((((((((((((((((((((((((((((((((((((((((((((((a|b)|c)|d)|e)|f)|g)|h)|i)|j)|k)|l)|m)|n)|o)|p)|q)|r)|s)|t)|u)|v)|w)|x)|y)|z)|A)|B)|C)|D)|E)|F)|G)|H)|I)|J)|K)|L)|M)|N)|O)|P)|Q)|R)|S)|T)|U)|V)|W)|X)|Y)|Z)|(((((((((0|1)|2)|3)|4)|5)|6)|7)|8)|9))*)).$)~))|((((((((((((0|1)|2)|3)|4)|5)|6)|7)|8)|9).((((((((((0|1)|2)|3)|4)|5)|6)|7)|8)|9)*)).$)~))|((((( |	)|
)|).$)~))
[build_dfa] Estado 24 es aceptante para 'ID'
[build_dfa] Estado 23 es aceptante para 'WHITESPACE'
[build_dfa] Estado 25 es aceptante para 'COMMENT'
[build_dfa] Estado 21 es aceptante para 'RBRACKET'
[build_dfa] Estado 20 es aceptante para 'LBRACKET'
[build_dfa] Estado 19 es aceptante para 'RBRACE'
[build_dfa] Estado 18 es aceptante para 'LBRACE'
[build_dfa] Estado 17 es aceptante para 'COMMA'
[build_dfa] Estado 16 es aceptante para 'NUMBER'
[build_dfa] Estado 15 es aceptante para 'SEMICOLON'
[build_dfa] Estado 14 es aceptante para 'COLON'
[build_dfa] Estado 13 es aceptante para 'RPAREN'
[build_dfa] Estado 12 es aceptante para 'LPAREN'
[build_dfa] Estado 11 es aceptante para 'DIVIDE'
[build_dfa] Estado 10 es aceptante para 'TIMES'
[build_dfa] Estado 9 es aceptante para 'MINUS'
[build_dfa] Estado 8 es aceptante para 'PLUS'
[build_dfa] Estado 7 es aceptante para 'GREATER'
[build_dfa] Estado 26 es aceptante para 'GREATEREQ'
[build_dfa] Estado 6 es aceptante para 'LESS'
[build_dfa] Estado 27 es aceptante para 'LESSEQ'
[build_dfa] Estado 28 es aceptante para 'NOTEQUAL'
[build_dfa] Estado 4 es aceptante para 'ASSIGN'
[build_dfa] Estado 29 es aceptante para 'EQUALS'
[build_dfa] Estado 3 es aceptante para 'ID'
[build_dfa] Estado 30 es aceptante para 'ID'
[build_dfa] Estado 31 es aceptante para 'ID'
[build_dfa] Estado 32 es aceptante para 'ID'
[build_dfa] Estado 33 es aceptante para 'WHILE'
[build_dfa] Estado 2 es aceptante para 'ID'
[build_dfa] Estado 34 es aceptante para 'ID'
[build_dfa] Estado 35 es aceptante para 'ID'
[build_dfa] Estado 36 es aceptante para 'ELSE'
[build_dfa] Estado 1 es aceptante para 'ID'
[build_dfa] Estado 37 es aceptante para 'IF'

[main] Iniciando minimización del AFD...
[main] Minimización completada.

[min] Estados aceptantes después de minimización:
  Estado 6 -> ID
  Estado 26 -> WHITESPACE
  Estado 27 -> COMMENT
  Estado 25 -> RBRACKET
  Estado 24 -> LBRACKET
  Estado 23 -> RBRACE
  Estado 22 -> LBRACE
  Estado 21 -> COMMA
  Estado 20 -> NUMBER
  Estado 19 -> SEMICOLON
  Estado 18 -> COLON
  Estado 17 -> RPAREN
  Estado 16 -> LPAREN
  Estado 15 -> DIVIDE
  Estado 14 -> TIMES
  Estado 13 -> MINUS
  Estado 12 -> PLUS
  Estado 11 -> GREATER
  Estado 28 -> GREATEREQ
  Estado 10 -> LESS
  Estado 29 -> LESSEQ
  Estado 30 -> NOTEQUAL
  Estado 9 -> ASSIGN
  Estado 31 -> EQUALS
  Estado 4 -> ID
  Estado 3 -> ID
  Estado 2 -> ID
  Estado 8 -> ID
  Estado 32 -> WHILE
  Estado 5 -> ID
  Estado 1 -> ID
  Estado 7 -> ID
  Estado 33 -> ELSE
  Estado 0 -> ID
  Estado 34 -> IF

[main] Contenido procesado con header/trailer:
# ojala que funcione
if(x1 >= 100):
{
    while(counter1 != 0)
    {
        result = result + value123;
        temp = (x1 - y1) * 5 / 3;
        array[10] = valueList[ index ];
    }
}
else:
{
    # Comentario dentro de bloque else
    errorCode = 404;
}

finalResult = result1 + temp2 * (value - offset) / scale;



[main] Contenido raw (repr): '# ojala que funcione\r\nif(x1 >= 100):\r\n{\r\n    while(counter1 != 0)\r\n    {\r\n        result = result + value123;\r\n        temp = (x1 - y1) * 5 / 3;\r\n        array[10] = valueList[ index ];\r\n    }\r\n}\r\nelse:\r\n{\r\n    # Comentario dentro de bloque else\r\n    errorCode = 404;\r\n}\r\n\r\nfinalResult = result1 + temp2 * (value - offset) / scale;\r\n'

Tokens reconocidos:
  COMMENT: '# ojala que funcione'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  IF: 'if'
  LPAREN: '('
  ID: 'x1'
  WHITESPACE: '' ''
  GREATEREQ: '>='
  WHITESPACE: '' ''
  NUMBER: '100'
  RPAREN: ')'
  COLON: ':'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  LBRACE: '{'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHILE: 'while'
  LPAREN: '('
  ID: 'counter1'
  WHITESPACE: '' ''
  NOTEQUAL: '!='
  WHITESPACE: '' ''
  NUMBER: '0'
  RPAREN: ')'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  LBRACE: '{'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  ID: 'result'
  WHITESPACE: '' ''
  ASSIGN: '='
  WHITESPACE: '' ''
  ID: 'result'
  WHITESPACE: '' ''
  PLUS: '+'
  WHITESPACE: '' ''
  ID: 'value123'
  SEMICOLON: ';'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  ID: 'temp'
  WHITESPACE: '' ''
  ASSIGN: '='
  WHITESPACE: '' ''
  LPAREN: '('
  ID: 'x1'
  WHITESPACE: '' ''
  MINUS: '-'
  WHITESPACE: '' ''
  ID: 'y1'
  RPAREN: ')'
  WHITESPACE: '' ''
  TIMES: '*'
  WHITESPACE: '' ''
  NUMBER: '5'
  WHITESPACE: '' ''
  DIVIDE: '/'
  WHITESPACE: '' ''
  NUMBER: '3'
  SEMICOLON: ';'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  ID: 'array'
  LBRACKET: '['
  NUMBER: '10'
  RBRACKET: ']'
  WHITESPACE: '' ''
  ASSIGN: '='
  WHITESPACE: '' ''
  ID: 'valueList'
  LBRACKET: '['
  WHITESPACE: '' ''
  ID: 'index'
  WHITESPACE: '' ''
  RBRACKET: ']'
  SEMICOLON: ';'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  RBRACE: '}'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  RBRACE: '}'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  ELSE: 'else'
  COLON: ':'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  LBRACE: '{'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  COMMENT: '# Comentario dentro de bloque else'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  WHITESPACE: '' ''
  ID: 'errorCode'
  WHITESPACE: '' ''
  ASSIGN: '='
  WHITESPACE: '' ''
  NUMBER: '404'
  SEMICOLON: ';'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  RBRACE: '}'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''
  ID: 'finalResult'
  WHITESPACE: '' ''
  ASSIGN: '='
  WHITESPACE: '' ''
  ID: 'result1'
  WHITESPACE: '' ''
  PLUS: '+'
  WHITESPACE: '' ''
  ID: 'temp2'
  WHITESPACE: '' ''
  TIMES: '*'
  WHITESPACE: '' ''
  LPAREN: '('
  ID: 'value'
  WHITESPACE: '' ''
  MINUS: '-'
  WHITESPACE: '' ''
  ID: 'offset'
  RPAREN: ')'
  WHITESPACE: '' ''
  DIVIDE: '/'
  WHITESPACE: '' ''
  ID: 'scale'
  SEMICOLON: ';'
  WHITESPACE: ''\r''
  WHITESPACE: ''\n''

Tabla de símbolos generada:

Tabla de Símbolos:
ID    Nombre          Tipo léxico     Líneas
--------------------------------------------------
1     x1              ID              2, 7
2     counter1        ID              4
3     result          ID              6
4     value123        ID              6
5     temp            ID              7
6     y1              ID              7
7     array           ID              8
8     valueList       ID              8
9     index           ID              8
10    errorCode       ID              14
11    finalResult     ID              17
12    result1         ID              17
13    temp2           ID              17
14    value           ID              17
15    offset          ID              17
16    scale           ID              17

[main] Archivo 'lexer.txt' generado con header y trailer.
